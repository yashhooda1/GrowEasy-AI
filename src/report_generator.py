import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak
from reportlab.lib.styles import getSampleStyleSheet
from src.data_ingestion import DataIngestion
from src.analysis_engine import AnalysisEngine
from src.explainability import Explainability

class ReportGenerator:
    def __init__(self, data_path, output_dir="reports"):
        self.data_path = data_path
        self.output_dir = output_dir
        self.data = None
        self.forecast = None
        self.explanation = None
    
    def load_data(self):
        """Load data using DataIngestion module."""
        ingestion = DataIngestion(self.data_path)
        self.data = ingestion.load_data()
    
    def analyze_data(self):
        """Perform analysis using AnalysisEngine."""
        engine = AnalysisEngine(self.data)
        self.forecast = engine.forecast_sales()
        
        # Initialize a dummy model for explanation (replace with actual model in production)
        from sklearn.linear_model import LinearRegression
        X = pd.to_datetime(self.data['date']).map(lambda x: x.toordinal()).values.reshape(-1, 1)
        model = LinearRegression().fit(X, self.data['sales'].values)
        explainer = Explainability(model, self.data[['sales']])
        self.explanation = explainer.explain_prediction(X[-1:])
    
    def generate_plot(self, plot_path):
        """Generate and save a sales forecast plot."""
        plt.figure(figsize=(10, 6))
        sns.lineplot(data=self.data, x='date', y='sales', label='Historical Sales')
        sns.lineplot(data=self.forecast, x='date', y='predicted_sales', label='Forecasted Sales', linestyle='--')
        plt.title("Sales Forecast")
        plt.xlabel("Date")
        plt.ylabel("Sales")
        plt.legend()
        plt.savefig(plot_path, bbox_inches='tight')
        plt.close()
    
    def generate_markdown_report(self):
        """Generate a Markdown report with insights and explanations."""
        self.load_data()
        self.analyze_data()
        
        # Create output directory if it doesn't exist
        import os
        os.makedirs(self.output_dir, exist_ok=True)
        
        # Generate plot
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        plot_path = f"{self.output_dir}/sales_forecast_{timestamp}.png"
        self.generate_plot(plot_path)
        
        # Create Markdown content
        report_content = f"""
# GrowEasy AI Consulting Report
Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Overview
This report provides data-driven insights for your business based on the provided dataset.

## Sales Forecast
The following plot shows historical and forecasted sales:

![Sales Forecast]({plot_path})

## Key Insights
- **Forecasted Sales**: The model predicts sales for the next 30 days based on historical trends.
- **Trend Analysis**: {self._get_trend_analysis()}

## Explanation of Predictions
{self.explanation}

## Recommendations
- **Optimize Inventory**: Based on the forecast, adjust stock levels to meet expected demand.
- **Marketing Strategy**: Increase promotions during predicted high-sales periods.

---

Generated by **GrowEasy AI**. For more details, visit the [GitHub repository](https://github.com/yashhooda1/GrowEasy-AI).
"""
        # Save Markdown report
        report_path = f"{self.output_dir}/consulting_report_{timestamp}.md"
        with open(report_path, 'w') as f:
            f.write(report_content)
        
        return report_path, plot_path, timestamp
    
    def generate_pdf_report(self, plot_path, timestamp):
        """Generate a PDF report with insights and explanations."""
        report_path = f"{self.output_dir}/consulting_report_{timestamp}.pdf"
        doc = SimpleDocTemplate(report_path, pagesize=letter)
        styles = getSampleStyleSheet()
        story = []
        
        # Title
        story.append(Paragraph("GrowEasy AI Consulting Report", styles['Title']))
        story.append(Paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", styles['Normal']))
        story.append(Spacer(1, 12))
        
        # Overview
        story.append(Paragraph("Overview", styles['Heading2']))
        story.append(Paragraph("This report provides data-driven insights for your business based on the provided dataset.", styles['Normal']))
        story.append(Spacer(1, 12))
        
        # Sales Forecast
        story.append(Paragraph("Sales Forecast", styles['Heading2']))
        story.append(Paragraph("The following plot shows historical and forecasted sales:", styles['Normal']))
        story.append(Image(plot_path, width=400, height=240))
        story.append(Spacer(1, 12))
        
        # Key Insights
        story.append(Paragraph("Key Insights", styles['Heading2']))
        story.append(Paragraph(f"- Forecasted Sales: The model predicts sales for the next 30 days based on historical trends.", styles['Normal']))
        story.append(Paragraph(f"- Trend Analysis: {self._get_trend_analysis()}", styles['Normal']))
        story.append(Spacer(1, 12))
        
        # Explanation
        story.append(Paragraph("Explanation of Predictions", styles['Heading2']))
        story.append(Paragraph(self.explanation.replace('\n', '<br/>'), styles['Normal']))
        story.append(Spacer(1, 12))
        
        # Recommendations
        story.append(Paragraph("Recommendations", styles['Heading2']))
        story.append(Paragraph("- Optimize Inventory: Based on the forecast, adjust stock levels to meet expected demand.", styles['Normal']))
        story.append(Paragraph("- Marketing Strategy: Increase promotions during predicted high-sales periods.", styles['Normal']))
        story.append(Spacer(1, 12))
        
        # Footer
        story.append(Paragraph("Generated by <b>GrowEasy AI</b>. For more details, visit the <a href='https://github.com/yashhooda1/GrowEasy-AI'>GitHub repository</a>.", styles['Normal']))
        
        # Build PDF
        doc.build(story)
        return report_path
    
    def generate_report(self):
        """Generate both Markdown and PDF reports."""
        markdown_path, plot_path, timestamp = self.generate_markdown_report()
        pdf_path = self.generate_pdf_report(plot_path, timestamp)
        return markdown_path, pdf_path
    
    def _get_trend_analysis(self):
        """Helper method to analyze trends in the forecast."""
        avg_predicted_sales = self.forecast['predicted_sales'].mean()
        avg_historical_sales = self.data['sales'].mean()
        trend = "increasing" if avg_predicted_sales > avg_historical_sales else "decreasing"
        return f"The sales trend is {trend}. Predicted average sales: {avg_predicted_sales:.2f} compared to historical average: {avg_historical_sales:.2f}."

if __name__ == "__main__":
    # Example usage
    generator = ReportGenerator("examples/retail_sales.csv")
    markdown_path, pdf_path = generator.generate_report()
    print(f"Markdown report generated at: {markdown_path}")
    print(f"PDF report generated at: {pdf_path}")
